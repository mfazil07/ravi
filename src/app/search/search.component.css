@model Qtc.PartnerPortal.WebApp.Models.CancelReschWeatherAlertViewModel

@{
    var idDDCountry = $"ddl{Model.Section}ApptCountry";
    var idDDState = $"ddl{Model.Section}ApptState";
    var idDDWeatherEvent = $"ddl{Model.Section}WeatherEvent";
}

<!-- Weather Alerts Section -->
<div class="row mt-3 mb-2" id="weatherAlertsSection" style="display:none;">
    <div class="row justify-content-between">
        <div class="col-3 p-2 h6 darkpurpleText">
            <span class="fa-stack">
                <i class="fa fa-circle-thin fa-stack-2x text-primary"></i>
                <i class="fa fa-cloud fa-stack-1x text-black"></i>
                <i class="fa fa-bolt fa-stack-1x text-danger mt-1"></i>
            </span>
            <b> Weather Alerts</b>
        </div>
    </div>
    <div class="col-md-5">
        <label title="Filter weather events by the Country" for="@idDDCountry">Weather Alert Countries</label>
        <span class="text-danger">*</span>
        <div class="form-group">
            <select id="@idDDCountry" name="Country" multiple="multiple" class="form-control mb-2 qtc-weather-alert-multi-select">
                @foreach (var item in Model.CountryList)
                {
                    var isSelected = Model.Country != null && Model.Country.Contains(item.Key);
                    <option value="@item.Key" selected="@isSelected">@item.Value</option>
                }
            </select>
            <div class="validationError divInvalidCountry text-danger" style="display:none">
                <span class="field-validation-error" data-valmsg-for="Country" data-valmsg-replace="true">
                    Please select at least one country.
                </span>
            </div>
        </div>
    </div>
    <div class="col-md-5" id="stateDropdownContainer" style="display:none;">
        <div class="form-group">
            <label title="Filter weather events by the State (US)" for="@idDDState">Weather Alert States (US)</label>
            <select class="form-control mb-2 qtc-weather-alert-multi-select" id="@idDDState" name="States" placeholder="- Select State -" multiple="multiple">
                @foreach (var item in Model.StatesList)
                {
                    var isSelected = Model.State != null && Model.State.Contains(item.Key);
                    <option value="@item.Key" selected="@isSelected">@item.Value</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-12 mt-3">
        <label title="Select the weather event affected the reschedule" for="@idDDWeatherEvent">Weather Alert</label>
        <div class="form-group">
            <select class="form-control" id="@idDDWeatherEvent" name="Weather Alerts" placeholder="- Select Weather Alert -">
                <!-- Will be populated dynamically -->
            </select>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // 1. Initialize with model values
        var selectedCountries = @Html.Raw(Json.Serialize(Model.Country ?? new List<string>()));
        var selectedStates = @Html.Raw(Json.Serialize(Model.State ?? new List<string>()));
        
        // Convert to arrays if single values
        if (selectedCountries && !Array.isArray(selectedCountries)) selectedCountries = [selectedCountries];
        if (selectedStates && !Array.isArray(selectedStates)) selectedStates = [selectedStates];

        // 2. Initialize multiselect dropdowns
        $('#@idDDCountry').multiselect({
            includeSelectAllOption: true,
            enableFiltering: true,
            buttonWidth: '100%',
            buttonClass: 'form-control text-left',
            onChange: function(option, checked) {
                handleCountryChange();
            }
        });

        $('#@idDDState').multiselect({
            includeSelectAllOption: true,
            enableFiltering: true,
            buttonWidth: '100%',
            buttonClass: 'form-control text-left',
            onChange: function(option, checked) {
                if ($('#@idDDCountry').val() && $('#@idDDCountry').val().includes("USA")) {
                    triggerWeatherEventsCheck();
                }
            }
        });

        // 3. Handle country selection changes
        function handleCountryChange() {
            var countries = $('#@idDDCountry').val() || [];
            var showStates = countries.includes("USA");
            
            $('#stateDropdownContainer').toggle(showStates);
            
            if (showStates) {
                // If USA was in model, set those states
                if (selectedCountries && selectedCountries.includes("USA") && selectedStates && selectedStates.length > 0) {
                    $('#@idDDState').multiselect('select', selectedStates);
                    // Trigger weather check after states are set
                    setTimeout(triggerWeatherEventsCheck, 100);
                }
            } else {
                // For non-USA countries, trigger immediately
                if (countries.length > 0) {
                    triggerWeatherEventsCheck();
                }
            }
        }

        // 4. AJAX call to get weather events
        function triggerWeatherEventsCheck() {
            var selectedCountries = $('#@idDDCountry').val() || [];
            var selectedStates = $('#@idDDState').val() || [];
            
            // Don't call if USA selected but no states chosen
            if (selectedCountries.includes("USA") && selectedStates.length === 0) {
                updateWeatherEventsDropdown([]);
                return;
            }

            $.ajax({
                url: "@Url.Action("GetWeatherEvents", "RescheduleReason")",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({
                    Country: selectedCountries,
                    State: selectedCountries.includes("USA") ? selectedStates : null
                }),
                success: function(response) {
                    updateWeatherEventsDropdown(response);
                },
                error: function(xhr, status, error) {
                    console.error("Error fetching weather events:", error);
                    updateWeatherEventsDropdown([]);
                }
            });
        }

        // 5. Update weather events dropdown
        function updateWeatherEventsDropdown(events) {
            var $dropdown = $('#@idDDWeatherEvent');
            $dropdown.empty().append('<option value="">- Select Weather Alert -</option>');
            
            if (events && events.length) {
                events.forEach(function(event) {
                    var optionText = "Event: " + event.WeatherEventName + 
                                   ", Type: " + event.Reason + 
                                   " [" + event.StartDate + " - " + event.EndDate + "]";
                    $dropdown.append($('<option></option>').val(event.WeatherEventId).text(optionText));
                });
            }
        }

        // 6. Toggle weather alerts section visibility
        function toggleWeatherAlerts() {
            var showSection = $("#ddlRequestedBy option:selected").text() === "EXAMINEE" && 
                            $("#ddlRescheduleReason option:selected").text() === "Appointment rescheduled per weather event";
            
            $("#weatherAlertsSection").toggle(showSection);
            
            if (showSection) {
                // Set initial country selections
                if (selectedCountries && selectedCountries.length > 0) {
                    $('#@idDDCountry').multiselect('select', selectedCountries);
                }
                
                // Handle USA case
                if (selectedCountries && selectedCountries.includes("USA")) {
                    $('#stateDropdownContainer').show();
                    if (selectedStates && selectedStates.length > 0) {
                        $('#@idDDState').multiselect('select', selectedStates);
                    }
                }
                
                // Trigger initial weather check
                setTimeout(triggerWeatherEventsCheck, 200);
            } else {
                // Clear selections when hidden
                $('#@idDDCountry').multiselect('deselectAll', false);
                $('#@idDDState').multiselect('deselectAll', false);
                $('#@idDDWeatherEvent').val(null);
            }
        }

        // 7. Initial setup
        $("#ddlRequestedBy, #ddlRescheduleReason").on("change", toggleWeatherAlerts);
        
        // Set initial visibility
        toggleWeatherAlerts();
        
        // If USA is in initial model countries, show states
        if (selectedCountries && selectedCountries.includes("USA")) {
            $('#stateDropdownContainer').show();
        }
    });
</script>
            
