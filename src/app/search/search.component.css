@model Qtc.PartnerPortal.WebApp.Models.CancelReschWeatherAlertViewModel

@{
    var idDDCountry = $"ddl{Model.Section}ApptCountry";
    var idDDState = $"ddl{Model.Section}ApptState";
    var idDDWeatherEvent = $"ddl{Model.Section}WeatherEvent";
    
    // Pre-serialize the model values
    var countryJson = Html.Raw(Json.Serialize(Model.Country ?? new List<string>()));
    var stateJson = Html.Raw(Json.Serialize(Model.State ?? new List<string>()));
}

<!-- Weather Alerts Section -->
<div class="row mt-3 mb-2" id="weatherAlertsSection">
    <div class="row justify-content-between">
        <div class="col-3 p-2 h6 darkpurpleText">
            <span class="fa-stack">
                <i class="fa fa-circle-thin fa-stack-2x text-primary"></i>
                <i class="fa fa-cloud fa-stack-1x text-black"></i>
                <i class="fa fa-bolt fa-stack-1x text-danger mt-1"></i>
            </span>
            <b> Weather Alerts</b>
        </div>
    </div>
    <div class="col-md-5">
        <label title="Filter weather events by the Country" for="@idDDCountry">Weather Alert Countries</label>
        <span class="text-danger">*</span>
        <div class="form-group">
            <select id="@idDDCountry" name="Country" multiple="multiple" class="form-control mb-2 qtc-weather-alert-multi-select">
                @foreach (var item in Model.CountryList)
                {
                    var isSelected = Model.Country != null && Model.Country.Contains(item.Key);
                    <option value="@item.Key" selected="@isSelected">@item.Value</option>
                }
            </select>
            <div class="validationError divInvalidCountry text-danger" style="display:none">
                <span class="field-validation-error" data-valmsg-for="Country" data-valmsg-replace="true">
                    Please select at least one country.
                </span>
            </div>
        </div>
    </div>
    <div class="col-md-5">
        <div class="form-group">
            <label title="Filter weather events by the State (US)" for="@idDDState">Weather Alert States (US)</label>
            <select class="form-control mb-2 qtc-weather-alert-multi-select" id="@idDDState" name="States" placeholder="- Select State -" multiple="multiple">
                @foreach (var item in Model.StatesList)
                {
                    var isSelected = Model.State != null && Model.State.Contains(item.Key);
                    <option value="@item.Key" selected="@isSelected">@item.Value</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-12 mt-3">
        <label title="Select the weather event affected the reschedule" for="@idDDWeatherEvent">Weather Alert</label>
        <div class="form-group">
            <select class="form-control" id="@idDDWeatherEvent" name="Weather Alerts" placeholder="- Select Weather Alert -">
                @* Weather event options loaded dynamically *@
            </select>
        </div>
    </div>
</div>

<script>
    function updateWeatherEventsDropdown(events) {
        var $dropdown = $("#@idDDWeatherEvent");
        $dropdown.empty();
        $dropdown.append('<option value="">- Select Weather Alert -</option>');
        if (events && events.length) {
            events.forEach(function (event) {
                var text = "Event: " + event.WeatherEventName + ", Type: " + event.Reason +
                    ", Description: " + event.Description +
                    " [" + event.StartDate + " - " + event.EndDate + "]";
                $dropdown.append('<option value="' + event.WeatherEventId + '">' + text + '</option>');
            });
        }
    }

    $(document).ready(function () {
        // Debug output
        console.log("Initial countries:", @countryJson);
        console.log("Initial states:", @stateJson);

        // Convert to arrays if needed
        var selectedCountries = @countryJson;
        var selectedStates = @stateJson;
        
        if (selectedCountries && !Array.isArray(selectedCountries)) selectedCountries = [selectedCountries];
        if (selectedStates && !Array.isArray(selectedStates)) selectedStates = [selectedStates];

        // Initialize multiselects with minimal configuration
        $('#@idDDCountry').multiselect({
            includeSelectAllOption: true,
            enableFiltering: true,
            buttonWidth: '100%',
            buttonClass: 'form-control text-left',
            nonSelectedText: '- Select Country -',
            // Disable all callbacks that might interfere
            onInitialized: null,
            onDropdownShown: null
        });

        $('#@idDDState').multiselect({
            includeSelectAllOption: true,
            enableFiltering: true,
            buttonWidth: '100%',
            buttonClass: 'form-control text-left',
            nonSelectedText: '- Select State -'
        });

        // Core function to apply selections reliably
        function applySelections() {
            // First reset both dropdowns
            $('#@idDDCountry').val(null).multiselect('refresh');
            $('#@idDDState').val(null).multiselect('refresh');
            
            // Then apply selections with proper timing
            setTimeout(function() {
                if (selectedCountries && selectedCountries.length) {
                    $('#@idDDCountry').val(selectedCountries).multiselect('refresh');
                    
                    // Special handling for USA
                    if (selectedCountries.includes("USA")) {
                        setTimeout(function() {
                            $('#@idDDCountry').multiselect('select', ['USA']);
                            console.log("USA selection attempted");
                        }, 100);
                    }
                }
                
                if (selectedStates && selectedStates.length) {
                    $('#@idDDState').val(selectedStates).multiselect('refresh');
                }
            }, 300);
        }

        // Modified toggle function that doesn't interfere with selections
        function toggleWeatherAlerts() {
            var requestedByText = $("#ddlRequestedBy option:selected").text();
            var rescheduleReasonText = $("#ddlRescheduleReason option:selected").text();

            if (requestedByText === "EXAMINEE" && rescheduleReasonText === "Appointment rescheduled per weather event") {
                $("#weatherAlertsSection").show();
                // Just refresh, don't reset
                setTimeout(function() {
                    $('#@idDDCountry').multiselect('refresh');
                    $('#@idDDState').multiselect('refresh');
                }, 100);
            } else {
                $("#weatherAlertsSection").hide();
                // Clear without destroying selections
                $('#@idDDState').multiselect('deselectAll', false);
                $('#@idDDCountry').multiselect('deselectAll', false);
                $("#@idDDWeatherEvent").val(null);
            }
        }

        // Toggle state dropdown based on country selection
        function toggleStateDropdown() {
            var selCountries = $('#@idDDCountry').val();
            if (selCountries && selCountries.includes('USA')) {
                $('#@idDDState').closest('.form-group').show();
            } else {
                $('#@idDDState').closest('.form-group').hide();
                $('#@idDDState').val([]).multiselect('refresh');
            }
        }

        // Weather events check logic
        function triggerWeatherEventsCheck() {
            setTimeout(function () {
                var selectedStates = $('#@idDDState').val() || [];
                var selectedCountries = $('#@idDDCountry').val();

                if (selectedCountries && selectedCountries.includes("USA") && selectedStates.length === 0) {
                    updateWeatherEventsDropdown([]);
                    return;
                }

                if (!selectedCountries || selectedCountries.length === 0) {
                    updateWeatherEventsDropdown([]);
                    return;
                }

                $.ajax({
                    url: "/RescheduleReason/GetWeatherEvents",
                    type: "POST",
                    data: JSON.stringify({
                        Country: selectedCountries,
                        State: selectedStates.length > 0 ? selectedStates : null
                    }),
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        updateWeatherEventsDropdown(response);
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching weather events:", error);
                    }
                });
            }, 100);
        }

        // Initialization sequence
        setTimeout(function() {
            applySelections();
            toggleWeatherAlerts();
            toggleStateDropdown();
            
            // Final verification after 1 second
            setTimeout(function() {
                var currentSelected = $('#@idDDCountry').val() || [];
                console.log("Current selected countries:", currentSelected);
                
                if (selectedCountries.includes("USA") && !currentSelected.includes("USA")) {
                    console.log("Applying USA selection fallback");
                    $('#@idDDCountry').multiselect('select', ['USA']);
                }
            }, 1000);
        }, 200);

        // Event bindings
        $("#ddlRequestedBy, #ddlRescheduleReason").on("change", toggleWeatherAlerts);
        $('#@idDDCountry').on('change', function() {
            toggleStateDropdown();
            triggerWeatherEventsCheck();
        });
        $('#@idDDState').on('change', triggerWeatherEventsCheck);
    });
</script>
