   // Shows/hides weather alerts section based on requested by and reason values
   function toggleWeatherAlerts(section, requestedById, requestedReasonId, reasonForWeatheralert) {
       debugger;
       let countryId = `#ddl${section}ApptCountry`;
       let stateId = `#ddl${section}ApptState`;
       let eventId = `#ddl${section}WeatherEvent`;
       let selectedCountryListId = `#${section}countriesData`;
       let selectedStateListId = `#${section}statesData`;
       let providerCountryListId = `#${section}countriesProviderData`;
       let providerStateListId = `#${section}statesProviderData`;
       let weatherAlertSection = `#weatherAlerts${section}Section`;

       let selectedCountriesFromModel = JSON.parse($(selectedCountryListId).val() || '[]');
       let selectedProviderCountriesFromModel = JSON.parse($(providerCountryListId).val() || '[]');

       let selectedStatesFromModel = JSON.parse($(selectedStateListId).val() || '[]');
       let selectedProviderStatesFromModel = JSON.parse($(providerStateListId).val() || '[]');

       let requestedByVal = $(requestedById + " option:selected").val();
       let reasonVal = $(requestedReasonId + " option:selected").val();

       // If ProviderCountry and Country are the same, just use Country
       if (JSON.stringify(selectedProviderCountriesFromModel) === JSON.stringify(selectedCountriesFromModel)) {
           selectedProviderCountriesFromModel = selectedCountriesFromModel;
       }

       // If ProviderState and State are the same, just use State
       if (JSON.stringify(selectedProviderStatesFromModel) === JSON.stringify(selectedStatesFromModel)) {
           selectedProviderStatesFromModel = selectedStatesFromModel;
       }

       if (requestedByVal && reasonVal === reasonForWeatheralert) {
           $(weatherAlertSection).show();
           var defaultCountries = [];
           defaultCountries.push(selectedProviderCountriesFromModel);
           defaultCountries.push(selectedCountriesFromModel);

           var defaultStates = [];
           defaultStates.push(selectedStatesFromModel);
           defaultStates.push(selectedProviderStatesFromModel);

           $(countryId).val(defaultCountries).trigger("change");
           $(stateId).val(defaultStates).trigger("change");    

           // Disable default country
           $(countryId).find("option").each(function () {
               let value = $(this).val();
               if (selectedProviderCountriesFromModel.includes(value)) {
                   $(this).prop("disabled", true);
               }
           });

           // Disable default state options
           $(stateId).find("option").each(function () {
               let value = $(this).val();
               if (selectedProviderStatesFromModel.includes(value)) {
                   $(this).prop("disabled", true);
               }
           });

           if ($(countryId).data('multiselect')) {
               $(countryId).multiselect('refresh');
               $(stateId).multiselect('refresh');
           }

           // Default load the events dropdown
           callGetWeatherEvents(section);
       } else {
           $(weatherAlertSection).hide();
           $(countryId).val(null).trigger("change");
           $(stateId).val(null).trigger("change");
           $(eventId).val("").trigger("change");

           if ($(countryId).data('multiselect')) {
               $(countryId).multiselect('refresh');
               $(stateId).multiselect('refresh');
           }
       }
   }


   // Enable or Disable Search button and show validation error messages
   function validateAndToggleSearchButton(controlName) {
       const startDate = $('#txtStartDate').val();
       const endDate = $('#txtEndDate').val();
       let isValid = true;

       $('.divInvalidStartDate, .divInvalidEndDate').hide();

       if (!startDate) {
           $('#startDateErrorMsg').text('Start Date is required!');
           $('.divInvalidStartDate').show();
           isValid = false;
       }

       if (!endDate) {
           $('#endDateErrorMsg').text('End Date is required!');
           $('.divInvalidEndDate').show();
           isValid = false;
       }

       if (startDate && endDate) {
           const start = new Date(startDate);
           const end = new Date(endDate);
           if (start > end) {
               isValid = false;

               if (controlName === 'startDate') {
                   $('#endDateErrorMsg').text('End Date must be greater than Start Date!');
                   $('.divInvalidEndDate').show();
               }

               if (controlName === 'endDate') {
                   $('#startDateErrorMsg').text('Start Date must be less than End Date!');
                   $('.divInvalidStartDate').show();
               }
           }
       }
       $('#btnWeatherAlertSearch').prop('disabled', !isValid);
   }
